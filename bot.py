import os
import asyncio
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, List, Optional, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, MessageHandler, filters
)
import aiohttp
import pytz

import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AlbionGathererBot:
    def __init__(self):
        self.application = None
        self.current_zone = None
        self.last_clear_time = None
        self.last_danger_level = None
        self.respawn_timers = {}
        self.last_processed_kills = set()
        self.is_monitoring = False
        self.monitoring_task = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.application = (
            Application.builder()
            .token(config.TELEGRAM_BOT_TOKEN)
            .build()
        )
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.show_main_menu))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_button_click))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–æ–Ω—ã
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await self.show_main_menu(update, context)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        if not self.current_zone:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–æ–Ω—É —á–µ—Ä–µ–∑ –º–µ–Ω—é")
            return
        
        status = await self.get_zone_status()
        await update.message.reply_text(status, parse_mode='Markdown')

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton(config.BUTTONS_CONFIG["main_menu"]["set_zone"], callback_data="set_zone")],
            [InlineKeyboardButton(config.BUTTONS_CONFIG["main_menu"]["current_status"], callback_data="current_status")],
            [InlineKeyboardButton(config.BUTTONS_CONFIG["main_menu"]["respawn_info"], callback_data="respawn_info")],
            [InlineKeyboardButton(config.BUTTONS_CONFIG["main_menu"]["safe_spots"], callback_data="safe_spots")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(
                "üéÆ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Albion Gatherer Guard**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.callback_query.edit_message_text(
                "üéÆ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Albion Gatherer Guard**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    async def show_zone_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã"""
        keyboard = []
        for zone_key, zone_name in config.BUTTONS_CONFIG["zone_buttons"].items():
            keyboard.append([InlineKeyboardButton(zone_name, callback_data=f"zone_{zone_key}")])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üìç **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –∑–æ–Ω—É:**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_zone_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–æ–Ω—ã"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–æ–Ω–∞ –æ—á–∏—â–µ–Ω–∞", callback_data="zone_cleared")],
            [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="check_danger")],
            [InlineKeyboardButton("‚è∞ –°—Ç–∞—Ç—É—Å —Ä–µ—Å–ø–∞—É–Ω–∞", callback_data="check_respawn")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üìç **–¢–µ–∫—É—â–∞—è –∑–æ–Ω–∞: {self.current_zone}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_button_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        try:
            if data == "set_zone":
                await self.show_zone_menu(update, context)
                
            elif data.startswith("zone_"):
                zone_key = data.split("_")[1]
                self.current_zone = config.BUTTONS_CONFIG["zone_buttons"][zone_key]
                await self.show_zone_actions(update, context)
                
            elif data == "current_status":
                status = await self.get_zone_status()
                await query.edit_message_text(status, parse_mode='Markdown')
                
            elif data == "zone_cleared":
                await self.handle_zone_cleared(update, context)
                
            elif data == "check_danger":
                danger_info = await self.check_current_danger()
                await query.edit_message_text(danger_info, parse_mode='Markdown')
                
            elif data == "check_respawn":
                respawn_info = await self.get_respawn_info()
                await query.edit_message_text(respawn_info, parse_mode='Markdown')
                
            elif data == "safe_spots":
                safe_spots = await self.find_safe_spots()
                await query.edit_message_text(safe_spots, parse_mode='Markdown')
                
            elif data == "back_to_main":
                await self.show_main_menu(update, context)
                
        except Exception as e:
            logger.error(f"Error handling button click: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def handle_zone_cleared(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–æ–Ω—ã"""
        self.last_clear_time = datetime.now(pytz.UTC)
        biome = config.ALL_T7_RED_ZONES.get(self.current_zone, "")
        
        if biome:
            t7_respawn_minutes = config.RESPAWN_TIMERS.get(f"{biome}_T7", 90)
            respawn_time = self.last_clear_time + timedelta(minutes=t7_respawn_minutes)
            
            self.respawn_timers = {
                'clear_time': self.last_clear_time,
                'zone': self.current_zone,
                'biome': biome,
                'T7_respawn': respawn_time
            }
            
            message = (
                f"‚úÖ **{self.current_zone} –æ—á–∏—â–µ–Ω–∞!**\n\n"
                f"‚è∞ T7 —Ä–µ—Å–ø–∞—É–Ω: {respawn_time.strftime('%H:%M MSK')}\n"
                f"üìä –ë–∏–æ–º: {biome}\n\n"
                f"–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
        else:
            message = "‚úÖ –í—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –±–∏–æ–º –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        await update.callback_query.edit_message_text(message, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        
        if text.lower() in ['–º—É—Ä–∫–≤–µ–∞–ª–¥', 'murkweald']:
            self.current_zone = "Murkweald (Red Zone)"
        elif text.lower() in ['—à–∏—Ñ—Ç—à–∞–¥–æ—É', 'shiftshadow']:
            self.current_zone = "Shiftshadow Expanse (Red Zone)"
        elif text.lower() in ['—Ä—É–Ω–Ω–µ–ª', 'runnel']:
            self.current_zone = "Runnel Sink (Red Zone)"
        elif text.lower() in ['–∫–∞–º–ª–∞–Ω–Ω', 'camlann']:
            self.current_zone = "Camlann (Red Zone)"
        elif text.lower() in ['–¥–æ–º—Ö–∞–π–Ω', 'domhain']:
            self.current_zone = "Domhain Chasm (Red Zone)"
            
        if self.current_zone:
            await update.message.reply_text(
                f"üìç –ó–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.current_zone}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            )
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ"
            )

    async def get_recent_kills(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    config.MURDER_LEDGER_API, 
                    params={'limit': config.KILLS_LIMIT},
                    timeout=aiohttp.ClientTimeout(total=config.API_TIMEOUT)
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('kills', [])
                    else:
                        logger.error(f"API error: {response.status}")
                        return []
        except Exception as e:
            logger.error(f"Error fetching kills: {e}")
            return []

    async def calculate_danger_level(self, kills_data: List[Dict]) -> Tuple[str, float, List[str]]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if not self.current_zone:
            return "UNKNOWN", 0, []
            
        danger_score = 0
        details = []
        
        # –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –∑–æ–Ω—ã
        your_zone_kills = [k for k in kills_data if k.get('location') == self.current_zone]
        if your_zone_kills:
            danger_score += len(your_zone_kills) * config.KILL_WEIGHTS["same_zone"]
            details.append(f"‚Ä¢ {len(your_zone_kills)} —É–±–∏–π—Å—Ç–≤ –≤ –≤–∞—à–µ–π –∑–æ–Ω–µ")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö –∑–æ–Ω
        neighbor_zones = config.ZONE_NEIGHBORS.get(self.current_zone, [])
        for neighbor in neighbor_zones:
            neighbor_kills = [k for k in kills_data if k.get('location') == neighbor]
            if neighbor_kills:
                danger_score += len(neighbor_kills) * config.KILL_WEIGHTS["neighbor_zone"]
                details.append(f"‚Ä¢ {len(neighbor_kills)} —É–±–∏–π—Å—Ç–≤ –≤ {neighbor}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if danger_score >= config.DANGER_THRESHOLDS["leave_zone"]:
            return "LEAVE", danger_score, details
        elif danger_score >= config.DANGER_THRESHOLDS["be_cautious"]:
            return "CAUTIOUS", danger_score, details
        else:
            return "SAFE", danger_score, details

    async def get_zone_status(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–æ–Ω—ã"""
        if not self.current_zone:
            return "‚ùå –ó–æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu"
            
        kills = await self.get_recent_kills()
        danger_level, score, details = await self.calculate_danger_level(kills)
        
        status_messages = {
            "LEAVE": "üö® –û–ü–ê–°–ù–û - –£–•–û–î–ò–¢–ï!",
            "CAUTIOUS": "‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û - –ë–£–î–¨–¢–ï –ì–û–¢–û–í–´",
            "SAFE": "üü¢ –ë–ï–ó–û–ü–ê–°–ù–û - –ú–û–ñ–ù–û –§–ê–†–ú–ò–¢–¨",
            "UNKNOWN": "‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–û"
        }
        
        message = (
            f"üìç **–°—Ç–∞—Ç—É—Å: {self.current_zone}**\n"
            f"**{status_messages[danger_level]}**\n\n"
        )
        
        if details:
            message += "**–î–µ—Ç–∞–ª–∏:**\n" + "\n".join(details) + "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if danger_level == "LEAVE":
            message += "üö® **–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Ö–æ–¥–∏—Ç–µ –∏–∑ –∑–æ–Ω—ã!**"
        elif danger_level == "CAUTIOUS":
            message += "‚ö†Ô∏è **–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –Ω–µ –æ—Ç—Ö–æ–¥–∏—Ç–µ –¥–∞–ª–µ–∫–æ –æ—Ç –≤—ã—Ö–æ–¥–∞**"
        else:
            message += "üü¢ **–ú–æ–∂–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ —Ñ–∞—Ä–º–∏—Ç—å**"
            
        return message

    async def check_current_danger(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        kills = await self.get_recent_kills()
        danger_level, score, details = await self.calculate_danger_level(kills)
        
        return await self.get_zone_status()

    async def get_respawn_info(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å–ø–∞—É–Ω–µ"""
        if not self.respawn_timers or self.respawn_timers.get('zone') != self.current_zone:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—á–∏—Å—Ç–∫–∏ —ç—Ç–æ–π –∑–æ–Ω—ã"
            
        now = datetime.now(pytz.UTC)
        t7_respawn = self.respawn_timers['T7_respawn']
        time_left = t7_respawn - now
        
        if time_left.total_seconds() <= 0:
            status = "üü¢ T7 —Ä–µ—Å—É—Ä—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø–æ—è–≤–∏—Ç—å—Å—è"
        else:
            hours = time_left.seconds // 3600
            minutes = (time_left.seconds % 3600) // 60
            status = f"üü° T7 —Ä–µ—Å–ø–∞—É–Ω —á–µ—Ä–µ–∑: {hours}—á {minutes}–º"
        
        return (
            f"‚è∞ **–†–µ—Å–ø–∞—É–Ω —Ä–µ—Å—É—Ä—Å–æ–≤**\n"
            f"üìç {self.current_zone}\n"
            f"üìä {self.respawn_timers['biome']}\n\n"
            f"{status}\n"
            f"üïí –í—Ä–µ–º—è —Ä–µ—Å–ø–∞—É–Ω–∞: {t7_respawn.strftime('%H:%M MSK')}"
        )

    async def find_safe_spots(self) -> str:
        """–ù–∞—Ö–æ–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã"""
        kills = await self.get_recent_kills()
        safe_zones = []
        
        for zone in config.ALL_T7_RED_ZONES.keys():
            zone_kills = [k for k in kills if k.get('location') == zone]
            if len(zone_kills) == 0:
                safe_zones.append(zone)
        
        if safe_zones:
            message = "üéØ **–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è —Ñ–∞—Ä–º–∞:**\n\n" + "\n".join(f"‚Ä¢ {zone}" for zone in safe_zones[:3])
        else:
            message = "‚ùå –ù–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å."
            
        return message

    async def monitoring_job(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                if not self.current_zone:
                    await asyncio.sleep(config.CHECK_INTERVAL_MINUTES * 60)
                    continue
                    
                kills = await self.get_recent_kills()
                danger_level, score, details = await self.calculate_danger_level(kills)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if self.last_danger_level != danger_level:
                    status = await self.get_zone_status()
                    await self.send_alert(status)
                    self.last_danger_level = danger_level
                    
                await asyncio.sleep(config.CHECK_INTERVAL_MINUTES * 60)
                
            except Exception as e:
                logger.error(f"Monitoring job error: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def send_alert(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"""
        try:
            await self.application.bot.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                text=message,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error sending alert: {e}")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.is_monitoring = True
        logger.info("Monitoring started")
        await self.monitoring_job()

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.is_monitoring = False
        logger.info("Monitoring stopped")

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        await self.initialize()
        logger.info("Bot is starting...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        self.monitoring_task = asyncio.create_task(self.start_monitoring())
        
        try:
            await self.application.run_polling()
        except asyncio.CancelledError:
            logger.info("Bot stopped")
        finally:
            await self.stop_monitoring()
            if self.monitoring_task:
                self.monitoring_task.cancel()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AlbionGathererBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
